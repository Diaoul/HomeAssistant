blueprint:
  name: "Entity State Notification"
  description: "

    **Features**

    - monitor entities for a specific state and trigger a notification

    - modify message, title, icon, color, channel, group etc

    - persistent notification until entity leaves specified state

    - periodical notification with stop functionality

    - custom actions

    - custom conditions


    **Hints**

    - if you want to test this automation, you need to change the state of an observed person. you can do this, in the developer options. Simply filter for your person entity, click on it and change the state to a zone used by this automation.


    **Help & FAQ**: [Entity State Notification](https://community.home-assistant.io/t/entity-state-notification)


    **Version**: 2.3.0


    If you like my work and support feel free to support me.

    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/Q5Q3QEH52)
    "

  source_url: https://github.com/panhans/homeassistant/blob/main/blueprints/automation/panhans/entity_state_persistent_notification.yaml
  domain: automation

  input:
    sensor_entity:
      name: "🖲️ Observed Entities"
      description: >
        'target'
      
      
        Entities which trigger the notification.
      selector:
        entity:
          multiple: true

    active_state:
      name: "🟢 Notification State"
      description: >
        'target'
      

        Target state that triggers the automation.
      default: "on"

    for_time_m:
      name: '⏲️ State Duration'
      description: >
        'target'
      
        Duration the entity must be in target state.
      default: 0
      selector:
        number:
          min: 0
          max: 59
          step: 1
          mode: slider
          unit_of_measurement: min

    notify_device:
      name: "📱 Device to notify"
      description: >
        `notification`
      
      
        Device which gets a notification.
      default:
      selector:
        device:
          filter:
            integration: mobile_app

    notify_group:
      name: '🫂 Notification Group'
      description: >
        `notification`
      
      
        The name of the notification group to call. ('notify' for all devices)
      default: ""

    title:
      name: "📕 Notification Title"
      description: >
        `notification`
      

        Headline of your notifications.
      default: "{{ entity_name }} is {{ avtive_state }}"

    message:
      name: "💬 Notification Message"
      description: >
        `notification`

        
        Content of your notifications.
      default: "Keep in mind: {{ entity_name }} is {{ active_state }}"

    ha_notification:
      name: '🏠 Persistent HomeAssistant Notification'
      description: >
        `notification`
      
      
        Creates a notification in your home assistant frontend.
      default: false
      selector:
        boolean:

    persistent_notification:
      name: '🪨 Persistent Notification'
      description: > 
        `notification`
      
        If turned on you can't swipe away the notification. It only disappears if the observed entity leave the target state.
      default: true
      selector:
        boolean:

    period:
      name: '🔄 Periodical Notification'
      description: >
        `periodical` `notification`
      
        
        Sends notification periodically. 0 means off.
      default: 0
      selector:
        number:
          min: 0
          max: 30
          step: 1
          mode: slider
          unit_of_measurement: min

    stop_button_text:
      name: "💬 Stop Button Text"
      description: >
        `periodical` `optional`


        Text for stop button in the notification to interrupt the periodical send notifications.
      default: "Stop notifying"

    status_bar_icon:
      name: "🌠 Status Bar Icon"
      description: >
        `Android` `optional`


        Sets the status bar icon.
      default: mdi:home-assistant
      selector:
        icon:
          placeholder: mdi:home-assistant

    notification_color:
      name: "🎨 Notification Color"
      description: >
        `Android` `optional`


        Color of the notification
      default: [100, 200, 240]
      selector:
        color_rgb:

    channel:
      name: "📭 Notification Channel"
      description: >
        `Android` `optional`


        You can set a notification channel. In your companion app you can set e.g. a custom sound for notifications in this channel.
      default: "General"

    group:
      name: "📑 Notification Group"
      description: >
        `Android` `optional`


        Group notifications by using this identifier.
      default: "espn-notification-group"

    vibration_pattern:
      name: "📳 Vibration Pattern"
      description: >
        `Android` `optional`


        Pattern of the vibration when notification arrives."
      default: "100, 100"

    led_color:
      name: "💡 Notification LED Color"
      description: >
        `Android` `optional`


        Color of the phone LED after incoming notification."
      default: [100, 200, 240]
      selector:
        color_rgb:

    custom_condition:
      name: "❌ Conditions"
      description: >
        `optional`


        Condition that must be met for the notification to be triggered.
      default: []
      selector:
        condition:

    custom_action_on:
      name: "🎬 Custom Action On"
      description: >
        `optional`

      
        Custom action when your observed entity enters the target states.
      default: []
      selector:
        action: {}

    custom_action_off:
      name: "🎬 Custom Action Off"
      description: >
        `optional`

      
        Custom action when observed entity leave the target state. Keep in mind this action also will be fired if your custom condition doesn't match.
      default: []
      selector:
        action: {}

variables:
  active_state: !input active_state
  sensor_entity: !input sensor_entity
  group_target: !input notify_group
  ha_notification: !input ha_notification
  notify_device: !input notify_device
  period: !input period
  action_prefix: "STOP_{{this.entity_id}}"
  notification_color: !input "notification_color"
  notification_color_hex: "#{{ '%02x%02x%02x' | format(notification_color[0], notification_color[1], notification_color[2]) }}"
  led_color: !input "led_color"
  led_color_hex: "#{{ '%02x%02x%02x' | format(led_color[0], led_color[1], led_color[2]) }}"

trigger_variables:
  for_time_m: !input for_time_m
  for_time_m_t: "{{ for_time_m | default(0) | int }}"

trigger:
  - platform: state
    entity_id: !input "sensor_entity"
    to: !input active_state
    for:
      minutes: "{{ for_time_m_t }}"
    id: "on"
  - platform: state
    entity_id: !input "sensor_entity"
    from: !input active_state
    id: "off"
  - platform: event
    event_type: pntc_event
    id: "period"

condition:
  - condition: or
    conditions:
      - condition: and
        conditions:  
        - condition: template
          value_template: "{{ trigger.id == 'on' }}"
        - condition: and
          conditions: !input custom_condition

      - condition: template
        value_template: "{{ trigger.id == 'off' }}"

      - condition: and
        conditions: 
        - condition: template
          value_template: "{{ trigger.id == 'period' and trigger.event.data.automation == this.entity_id }}"
        - condition: and
          conditions: !input custom_condition

action:
  - variables:
      is_period_trigger: "{{ trigger.id == 'period' }}"
      sensor: |
        {% if is_period_trigger %}
          {{ trigger.event.data.s_entity }}
        {% else %}
          {{ trigger.from_state.entity_id }}
        {% endif %}
      entity_name: "{{ state_attr(sensor,'friendly_name') }}"
      tag: "{{ this.entity_id.split('.')[1] + sensor.split('.')[1] }}"
      action_tag: "{{ action_prefix }}_{{ sensor }}"

  - if:
      - condition: template
        value_template: "{{ is_period_trigger or trigger.to_state.state == active_state }}"
    then:
      - if:
          - condition: template
            value_template: "{{ notify_device != none }}"
        then:
          - if:
              - condition: template
                value_template: "{{ period > 0 }}"
            then:
              - service: 'notify.mobile_app_{{ device_attr(notify_device, "name") | slugify }}'
                data:
                  title: !input title
                  message: !input message
                  data:
                    ttl: 0
                    priority: high
                    notification_icon: !input "status_bar_icon"
                    tag: "{{ tag }}"
                    persistent: !input persistent_notification
                    sticky: !input persistent_notification
                    channel: !input "channel"
                    group: !input "group"
                    color: "{{ notification_color_hex }}"
                    vibrationPattern: !input "vibration_pattern"
                    ledColor: "{{led_color_hex}}"
                    actions:
                      - action: "{{ action_tag }}"
                        title: !input stop_button_text
            else:
              - service: 'notify.mobile_app_{{ device_attr(notify_device, "name") | slugify }}'
                data:
                  title: !input title
                  message: !input message
                  data:
                    ttl: 0
                    priority: high
                    notification_icon: !input "status_bar_icon"
                    tag: "{{ tag }}"
                    persistent: !input persistent_notification
                    sticky: !input persistent_notification
                    channel: !input "channel"
                    group: !input "group"
                    color: "{{ notification_color_hex }}"
                    vibrationPattern: !input "vibration_pattern"
                    ledColor: "{{led_color_hex}}"
      - if:
          - condition: template
            value_template: "{{ group_target is defined and group_target != '' }}"
        then:
          - if:
              - condition: template
                value_template: "{{ period > 0 }}"
            then:
              - service: notify.{{ group_target }}
                data:
                  title: !input title
                  message: !input message
                  data:
                    ttl: 0
                    priority: high
                    notification_icon: !input "status_bar_icon"
                    tag: "{{ tag }}"
                    persistent: !input persistent_notification
                    sticky: !input persistent_notification
                    channel: !input "channel"
                    group: !input "group"
                    color: "{{ notification_color_hex }}"
                    vibrationPattern: !input "vibration_pattern"
                    ledColor: "{{led_color_hex}}"
                    actions:
                      - action: "{{ action_tag }}"
                        title: !input stop_button_text
            else:
              - service: notify.{{ group_target }}
                data:
                  title: !input title
                  message: !input message
                  data:
                    ttl: 0
                    priority: high
                    notification_icon: !input "status_bar_icon"
                    tag: "{{ tag }}"
                    persistent: !input persistent_notification
                    sticky: !input persistent_notification
                    channel: !input "channel"
                    group: !input "group"
                    color: "{{ notification_color_hex }}"
                    vibrationPattern: !input "vibration_pattern"
                    ledColor: "{{led_color_hex}}"
      - if:
          - condition: template
            value_template: "{{ ha_notification }}"
        then:
          - service: persistent_notification.create
            data:
              title: !input title
              message: !input message
              notification_id: "{{ tag }}"
    else:
      - service: notify.notify
        data:
          data:
            tag: "{{ tag }}"
            ttl: 0
            priority: high
          message: clear_notification
      - service: persistent_notification.dismiss
        data:
          notification_id: "{{ tag }}"

  - if:
      - condition: template
        value_template: "{{ period > 0 }}"
    then:
      - wait_for_trigger:
          - platform: event
            event_type: mobile_app_notification_action
            event_data:
              action: "{{ action_tag }}"
        timeout:
          minutes: "{{ period }}"
      - if:
          - condition: template
            value_template: "{{ states(sensor) == active_state }}"
          - condition: template
            value_template: "{{ wait.trigger == none }}"
        then:
          - event: pntc_event
            event_data:
              s_entity: "{{ sensor }}"
              automation: "{{ this.entity_id }}"

  - if:
    - condition: template
      value_template: "{{ is_period_trigger or trigger.to_state.state == active_state }}"
    then:
      - variables:
          custom_action_on: !input custom_action_on
      - if:
        - condition: template
          value_template: "{{ custom_action_on != none }}"
        then:
          - choose: []
            default: !input "custom_action_on"
    else:
      - variables:
          custom_action_on: !input custom_action_off
      - if:
        - condition: template
          value_template: "{{ custom_action_off != none }}"
        then:
          - choose: []
            default: !input "custom_action_off"

mode: parallel