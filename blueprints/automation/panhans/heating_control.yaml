blueprint:
  name: 🔥 Advanced Heating Control
  author: panhans
  homeassistant:
    min_version: "2024.10.0"
  description: "



    🔥 heating / ❄ based on


    > 👥 people presence

    🗓️ multiple schedulers

    🚶 presence sensor

    ↔️ proximity aka geo fencing


    🥶 frost protection

    😡 adjustable aggressive mode

    🌤️ activation based on weather, temperature or boolean entities

    🎛️ granular schedule adjustments

    🪟 multiple window open detection

    🎈 party mode

    🤝 guest mode

    ⚔️ liming protection

    🧭 thermostat calibration for the most common devices (Tado, Aqara, Popp / Danfoss / Hive, Tuya)

    ⚙️ several tweaks for fixing your thermostat issues

    🎬 custom action

    🤫 calm & 💪 reliable



    **Version**: 4.3.15

    **Help & FAQ**: [Advanced Heating Control](https://community.home-assistant.io/t/advanced-heating-control/469873)

    **Documentation:** work in progress


    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/Q5Q3QEH52)

    "
  source_url: https://github.com/panhans/HomeAssistant/blob/main/blueprints/automation/panhans/heating_control.yaml
  domain: automation
  input:
    thermostat_section:
      name: Thermostats & Sensors
      icon: mdi:thermostat
      input:
        input_trvs:
          name: 🔥 Thermostats / Climates
          description: >
            `thermostats` `climates` 


            [Thermostats / Climates](https://www.home-assistant.io/integrations/climate/) to be controlled.
          selector:
            entity:
              filter:
                - domain:
                    - climate
              multiple: true

        input_hvac_mode:
          name: 🎛️ Operation / HVAC Mode
          description: >
            `hvac`


            Select the hvac mode for your [thermostats](https://www.home-assistant.io/integrations/climate/). Be sure your selected thermostats support the hvac mode you've chosen.
            AHC will log a warning if there is a miss match. For radiator [thermostats]((https://www.home-assistant.io/integrations/climate/)) the default is mostly *heat*.
            If you own an air conditioner it will support *auto* or *cool*, too.
          default: "heat"
          selector:
            select:
              options:
                - heat
                - cool
                - auto
                - heat_cool

        input_temperature_sensor:
          name: 🌡️ Room Temperature Sensor
          description: >
            `calibration` `aggressive mode` `optional`


            For some features an external temperature sensor is reqired, e.g. calibration.

            Temperature calibration for your [thermostats](https://www.home-assistant.io/integrations/climate/). The following is supported:

              * Tado, Aqara, Popp, Danfoss, Hive, Tuya
              * generic calibration

            Note: This is an additional sensor inside your room usually next to your favourite spot. [Thermostats](https://www.home-assistant.io/integrations/climate/) or its integration (e.g. Z2M or ZHA) except Tado should provide a seperate calibration entity.
          default:
          selector:
            entity:
              filter:
                - domain:
                    - sensor
                  device_class:
                    - temperature
              multiple: false
                

    temperature_section:
      name: Temperatures
      icon: mdi:thermometer
      collapsed: true
      input:

        input_temperature_comfort_static:
          name: 🛋️ Static Comfort Temperature
          description: >
            `comfort temperature`


            You can set a static comfort temperature here.
          default: 22
          selector:
            number:
              min: 12.0
              max: 86.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        input_temperature_minimum_static:
          name: 🌱 Static Eco Temperature
          description: >
            `eco temperature`


            The temperature that is set when your heating schedule is not active.
          default: 19
          selector:
            number:
              min: 4.0
              max: 75.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        input_temperature_comfort:
          name: 🛋️ Comfort Temperature
          description: >
            `comfort temperature` `optional`


            To control your comfort temperature via automations or the UI, you can specify an *[input_number](https://www.home-assistant.io/integrations/input_number/)* entity here.


            Create your helper [here](https://my.home-assistant.io/redirect/helpers/).
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_number
              multiple: false

        input_temperature_minimum:
          name: 🌱 Eco Temperature
          description: >
            `eco temperature` `optional`


            To control your eco temperature via automations or the UI, you can specify an *[input_number](https://www.home-assistant.io/integrations/input_number/)* entity here.


            Create your helper [here](https://my.home-assistant.io/redirect/helpers/).
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_number
              multiple: false

    adjustment_section:
      name: Adjustments / Heating Plan
      icon: mdi:sun-clock
      collapsed: true
      input:
        
        input_time_based_temperature_change_valve_target:
          name: 🎛️ Heating Schedule Adjustments
          description: >
            `optional`


            Here you can setup some adjustments to your heating schedule.<br/><br/>
            *Note*: Here you can set values for eco or comfort temperature. The switch between those target temperatures is controled by schedules, presence sensors, proximity, ect.
            <br/>

            <details>
            <summary><code><strong>CLICK HERE:</strong> Modifiers</code></summary>
            <br/>


            > 🕔 **time**

            > Timestamp when the adjustment should kick in. (required)


            > 📆 **days**

            > Select days where this setting shall be enabled.

            > ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']


            > 🗓️ **scheduler**

            > Only enable this entry if this string is part of the name of your active scheduler.


            > 🛋️ **comfort**

            > Adjust comfort temperature


            > 🌱 **eco**

            > Adjust eco temperature


            > 🧭 **calibration**

            > Toggle calibration 

            > on/off


            </details>

            <br/>

            <details>
            <summary><code><strong>CLICK HERE:</strong> Example</code></summary>
            <br/>


            ```yaml

            - time: "08:00"
              comfort: "20"
              calibration: "off"
            - time: "16:00"
              eco: "19"
              calibration: "on"
            - time: "20:00"
              days: ['Sat','Sun']
              scheduler: 'Holidays'
              comfort: "24"
              eco: "17"
            ```

            </details>

          selector:
            object:
          default: "[]"

    # M O D E S
    mode_section:
      name: Force Comfort Mode
      icon: mdi:fire
      collapsed: true
      input:
        input_mode_party:
          name: 🎈 Party mode
          description: >
            `optional`


            If on, all settings are ignored and heating takes place. You can define multiple [timers](https://www.home-assistant.io/integrations/timer/) or boolean entities.
            If you put a number at the end of the friendly name like *Party Timer 20* this number will be taken as the desired comfort temperature for this [timer](https://www.home-assistant.io/integrations/timer/).


            Create your timer [here](https://my.home-assistant.io/redirect/helpers/).
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
                    - timer
              multiple: true

        input_force_max_temperature:
          name: 🥵 Force Max Temperature
          description: >
            `optional`


            Set the maximum temperature of all [thermostats](https://www.home-assistant.io/integrations/climate/) regardless of any other settings.


            **HINT:** Implemented by developer for maintenance reasons. Create your helper [here](https://my.home-assistant.io/redirect/helpers/).
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
              multiple: false

    temperature_tweak_section:
      name: Temperature Tweaks
      icon: mdi:knob
      collapsed: true
      input:
        input_off_instead_of_eco:
          name: 🛑 Off Instead Of Eco
          description: >
            `optional` `temperature tweak`


            Turn off your [thermostats](https://www.home-assistant.io/integrations/climate/) instead of lower the target temperature to eco temperature.
          default: false
          selector:
            boolean:


        input_min_instead_of_off:
          name: ⬇️ Min Instead Of Off
          description: >
            `optional` `temperature tweak`


            Lower the temperature instead of turning them *OFF*, e.g. during airing.
          default: false
          selector:
            boolean:


        input_fahrenheit:
          name: 🇫 Fahrenheit
          description: >
            `optional` `temperature tweak`


            Enable this if your unit of measurement is Fahrenheit (untested).
          default: false
          selector:
            boolean:

        input_reset_temperature:
          name: ↩️ Reset Temperature
          description: >
            `optional` `temperature tweak`


            Reset your temperature entities to the values of the static temperatures after [schedule](https://www.home-assistant.io/integrations/schedule/) or [presence](https://www.home-assistant.io/integrations/schedule) ends.
          default: false
          selector:
            boolean:

        input_off_if_above_room_temperature:
          name: ↕️ Off If Above/Below Room Temperature
          description: >

            Turns your [climate](https://www.home-assistant.io/integrations/climate/) entity *off* if the target temperature is below(cooling) / above(heating) the room temperature.

          default: false
          selector:
            boolean:

        input_physical_change:
          name: 🧪 Physical Temperature Change / Sync (experimental)
          description: >
            `optional` `temperature tweak`


            Enable this if your want to adjust the temperature using your thermostat or thermostat card. Make sure aggressive mode and generic calibration is disabled for this feature. (experimental).
            You also need to set entities for eco and comfort temperature for the moment. 
          default: false
          selector:
            boolean:

    # P E R S O N S
    person_section:
      name: People
      icon: mdi:account-multiple
      collapsed: true
      input:
        input_persons:
          name: 👥 People
          description: >
            `people` `optional`


            You can specify [people](https://www.home-assistant.io/integrations/person/) to make your heating plan more dynamic. If you do not use [schedulers](https://www.home-assistant.io/integrations/schedule/) or presence sensors, heating is activated as soon as someone is at home.<br/>
            With [schedulers](https://www.home-assistant.io/integrations/schedule/) or presence sensors, these are only active when someone is at home.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - person
              multiple: true

        input_people_entering_home_duration:
          name: 🏠 Enter Home Duration
          description: >
            `people`


            Duration for which someone must be at home for heating to be activated.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

        input_people_leaving_home_duration:
          name: 💨 Leaving Home Duration
          description: >
            `people`


            Duration for which someone must be out of the house for heating to be deactivated.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

        input_mode_guest:
          name: 🤝 Guest mode
          description: >
            `optional`



            If an entity is specified here, it is treated like a [person](https://www.home-assistant.io/integrations/person/). It's usefull when you're leaving your guests alone in your home and you are not using presence detection.

              * entity defined -> [person](https://www.home-assistant.io/integrations/person/) defined
              * enitity is *on* -> simulates [person](https://www.home-assistant.io/integrations/person/) is home
              * enitity is *off* -> simulates [person](https://www.home-assistant.io/integrations/person/) is away


            Create your helper [here](https://my.home-assistant.io/redirect/helpers/).
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
                    - timer
              multiple: false

    # S C H E D U L E R
    scheduling_section:
      name: Scheduling
      icon: mdi:clock-outline
      collapsed: true
      input:
        input_schedulers:
          name: ⏲️ Scheduler
          description: >
            `scheduler` `optional`


            A [scheduler](https://www.home-assistant.io/integrations/schedule/) specifies when heating to comfort temperature should take place. You can create it in the helper section of Home Assistant.<br/>
            If you have also specified [people](https://www.home-assistant.io/integrations/person/), someone must also be at home for heating.<br/>
            You can create as many [schedulers](https://www.home-assistant.io/integrations/schedule/) as you like. Make sure the names are clear.


            Create your scheduler [here](https://my.home-assistant.io/redirect/helpers/).
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: true

        input_scheduler_selector:
          name: ☝🏻 Scheduler Selector
          description: >
            `scheduler` `optional`


            Define an entity to choose from your schedulers. If you use one scheduler only you can ignore this. If you use more than one scheduler you have multiple possibilities to setup your selection.<br/>

            <details>
            <summary><code><strong>CLICK HERE:</strong> More information</code></summary>
            <br/>



            * toggle [input_boolean](https://www.home-assistant.io/integrations/input_boolean/) or [binary_sensor](https://www.home-assistant.io/integrations/binary_sensor/): If *off* the first defined [scheduler](https://www.home-assistant.io/integrations/schedule/) is active. If *on* the second [scheduler](https://www.home-assistant.io/integrations/schedule/) is active. More than two [schedulers](https://www.home-assistant.io/integrations/schedule/) cannot be selected with binary inputs.

            * text [input text](https://www.home-assistant.io/integrations/input_text/), drop down [input text](https://www.home-assistant.io/integrations/input_select/) or [sensor](https://www.home-assistant.io/integrations/sensor/):
              * The value has to match the friendly name of the selected [scheduler](https://www.home-assistant.io/integrations/schedule/) at least partially. Example: If you provide three [schedulers](https://www.home-assistant.io/integrations/schedule/) called *work*, *holiday/sick*, *guest* you can select the holiday [scheduler](https://www.home-assistant.io/integrations/schedule/) while setting the selection entity to *sick*, *holiday* or *holiday/sick*. This option is case insensitive.
              * You also can go with numbers: if you want to choose the first [scheduler](https://www.home-assistant.io/integrations/schedule/) the selector entity must return the number *1*. For the 2nd number *2* and so on.


            Create your helper [here](https://my.home-assistant.io/redirect/helpers/).



            </details>

          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
                    - input_text
                    - input_number
                    - input_select
              multiple: false

    # P R E S E N C E
    presence_section:
      name: Presence Detection
      icon: mdi:location-enter
      collapsed: true
      input:
        input_presence_sensor:
          name: 🚶 Presence Sensor / On/Off-Entity
          description: >
            `presence detection` `optional`


            If you specify a presence sensor, heating will take place if it detects presence.<br/>
            If you have specified [people](https://www.home-assistant.io/integrations/person/), at least one must also be at home. You also can select an [Input Boolean](https://www.home-assistant.io/integrations/input_boolean/) entity to realise a simple On/Off-Logic.
          default:
          selector:
            entity:
              filter:
                - domain:
                    - binary_sensor
                    - input_boolean
              multiple: false

        input_scheduler_presence:
          name: ⏲️ Presence Sensor Scheduler
          description: >
            `presence detection` `optional`


            The presence [scheduler](https://www.home-assistant.io/integrations/schedule/) specifies exactly when the presence sensor should be used during the day.
          default:
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: false

        input_presence_reaction_on_time:
          name: ⏳ Presence Reaction On Time
          description: >
            `presence detection`


            Specify the duration for which the presence sensor must detect any presence so that the comfort temperature is set.
          default:
            hours: 0
            minutes: 5
            seconds: 0
          selector:
            duration:

        input_presence_reaction_off_time:
          name: ⌛ Presence Reaction Off Time
          description: >
            `presence detection`


            Specify the duration for which the presence sensor must not detect any presence so that the minimum temperature is set.
          default:
            hours: 0
            minutes: 5
            seconds: 0
          selector:
            duration:

    # P R O X I M I T Y
    proximity_section:
      name: Proximity
      icon: mdi:leak
      collapsed: true
      input:
        input_proximity:
          name: ↔️ Proximity
          description: >
            `proximity` `optional`


            You can preheat your rooms with help of home assistant's [proximity integration](https://www.home-assistant.io/integrations/proximity/).<br/>
            Just select your proxmity zone and take your adjustments to distance and duration.<br/>
            If you're in range of your distance and towards to your home heating kicks in. If you don't specify any scheduler or presence detector heating also is enabled if you arrived.<br/>

            **Note**: If *on way home* is detected this gets handled like presence is on or somebody is home. So this has to match with the states of your schedulers if you use them.
          default: ""
          selector:
            device:
              filter:
                integration: proximity
              multiple: false

        input_proximity_duration:
          name: ⏰ Proximity Duration
          description: >
            `proximity`


            Duration for which someone must be on way home before heating occurs.
          default:
            hours: 0
            minutes: 2
            seconds: 0
          selector:
            duration:

        input_proximity_distance:
          name: ↔️ Proximity Distance
          description: >
            `proximity`


            The distance when proximity sensor gets impact for this automation. Hint: Unit depends on the setup of your integration.
          default: 500
          selector:
            number:
              min: 0
              max: 999999999
              step: 1
              mode: box

    # AWAY MODE
    away_section:
      name: Away Mode
      icon: mdi:walk
      collapsed: true
      input:
        # AWAY OFFSET
        input_away_offset:
          name: 🏃 Away Temperature Offset
          description: >
            `scheduler` `persons` `presence` `away mode`


            First: This feature only works for [schedule](https://www.home-assistant.io/integrations/schedule/) and/or presence based heating combined with [people/persons](https://www.home-assistant.io/integrations/person/). You can define an offset for your comfort temperature that will be subtracted (heating) from or added (cooling) to your comfort temperature.

            If you enable this option for [scheduling](https://www.home-assistant.io/integrations/schedule/) the away offset will be substracted from the comfort temperature if your scheduler is *on* but nobody is at home.
            For presence detection this is the case if you are at home but no presence is detected.
          default: 0
          selector:
            number:
              min: 0
              max: 10
              step: 0.5
              mode: slider
              unit_of_measurement: °C / °F

        input_away_scheduler_mode:
          name: ⏲️ Scheduler Away Mode
          description: >
            `scheduler` `away mode`


            Enable/Disable the Away Offset for [scheduled](https://www.home-assistant.io/integrations/schedule/) based heating/cooling.
          default: false
          selector:
            boolean:

        input_away_presence_mode:
          name: 🚶 Presence Away Mode
          description: >
            `presence` `away mode`


            Enable/Disable the Away Offset for presence based heating/cooling.
          default: false
          selector:
            boolean:

        input_away_presence_ignor_people:
          name: 🚶 Ignore People For Presence Away Mode
          description: >
            `presence` `away mode`


            If you want to make away happen if your presence scheduler is on but no motion is detected regardless if somebody is at home enable this option.
          default: false
          selector:
            boolean:

    # W I N D O W   O P E N   D E T E C T I O N
    window_section:
      name: Window & Door Detection
      icon: mdi:door
      collapsed: true
      input:
        input_windows:
          name: 🪟 Windows & Doors
          description: >
            `airing` `optional`


            If open during airing your [thermostats](https://www.home-assistant.io/integrations/climate/) will be set to *off* at least to their minimum temperature if they don't support hvac mode *OFF*.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - binary_sensor
              multiple: true

        input_windows_reaction_time_open:
          name: ⏳ Window & Door Reaction Time Open
          description: >
            `airing`


            Duration for which a window or door must be open for the [thermostats](https://www.home-assistant.io/integrations/climate/) to close.
          default:
            hours: 0
            minutes: 0
            seconds: 30
          selector:
            duration:

        input_windows_reaction_time_close:
          name: ⌛ Window & Door Reaction Time Close
          description: >
            `airing`  


            Duration for which a window or door must be closed for the [thermostats](https://www.home-assistant.io/integrations/climate/) to open.
          default:
            hours: 0
            minutes: 0
            seconds: 30
          selector:
            duration:

        input_window_open_temperature:
          name: Window Open Temperature
          description: >
            `airing` 


            If 0° your thermostat turns *off* or if not supported it turns to the minimum temperature of your thermostat.
          default: 0
          selector:
            number:
              min: 0
              max: 15
              step: 1
              mode: slider
              unit_of_measurement: °C / °F
            
        input_window_legacy_restore:
          name: 🏚️ Legacy Restore
          description: >
            `airing` 


            Enable this if the temperatures after airing (closing windows) or party won't restore properly
          default: false
          selector:
            boolean:
    
    # C A L I B R A T I O N
    calibration_section:
      name: Calibration
      icon: mdi:compass
      description: ""
      collapsed: true
      input:

        input_calibration_timeout:
          name: ⏳ Calibration Timeout
          description: >
            `calibration`


            Define a timeout if you want to decrease the amount of calibration calls if temperature changes too much.
            At least the temperature of the external sensor or [thermostat](https://www.home-assistant.io/integrations/climate/) must stay for that duration before calibration gets triggered.

            **HINT:** A minimum timeout of 2s is recommended.
          default:
            hours: 0
            minutes: 1
            seconds: 0
          selector:
            duration:

        input_calibration_delta:
          name: ↔️ Calibration Delta
          description: >
            `calibration`


            If the difference between the [thermostat](https://www.home-assistant.io/integrations/climate/) temperature and the external sensor temperature is greater or less than the calibration delta the [thermostat](https://www.home-assistant.io/integrations/climate/) calibration will be triggered.<br/>
            The lower the delta the often calibration gets triggered.
          default: 0.5
          selector:
            number:
              min: 0
              max: 5
              step: 0.1
              mode: slider
              unit_of_measurement: °C / °F

        input_calibration_generic:
          name: 🧭 Generic Calibration
          description: >
            `calibration`


            Adds the difference between room and [thermostat](https://www.home-assistant.io/integrations/climate/) temperature to the target temperature.
          default: false
          selector:
            boolean:

        input_calibration_rounded_values:
          name: 🌕 Fully Rounded Values
          description: >
            `calibration`


            Enable this if you [thermostat](https://www.home-assistant.io/integrations/climate/) calibration entity accept floating values but only save them as integers.
          default: false
          selector:
            boolean:

    # M O D I F I E R S
    aggressive_mode_section:
      name: Aggressive Mode
      icon: mdi:emoticon-angry
      collapsed: true
      input:
        input_aggressive_mode_range:
          name: 😡 Aggressive Range
          description: >
            `aggressive mode` `tweak`


            Activate this option if your [thermostats](https://www.home-assistant.io/integrations/climate/) react slowly or only start to react at a large temperature difference between actual and set temperature.
            Define a range when your real target temperature shall be set. 

            <details>
            <summary><code><strong>CLICK HERE:</strong> More information</code></summary>
            <br/>

            E.g. you target temperature is 20°C and your room temperature is 19.5°C.
            If your range is set to 0.5°C the real target temperature (20°C) will be set when room temperature is between 19.5°C and 20.5°C.
            If the room temperature is above or lower than range, it gets some offset in order to force your [thermostat](https://www.home-assistant.io/integrations/climate/) to react. (see Aggressive Mode - Offset)

            </details>

          default: 0
          selector:
            number:
              min: 0
              max: 5
              step: 0.1
              mode: slider
              unit_of_measurement: °C / °F

        input_aggressive_mode_offset:
          name: ↕ Aggressive Offset
          description: >
            `aggressive mode` `tweak`


            Here you can define the offset that will be added to your target temperature if the room temperature is not in range of your target temperature.
            If your room temperature is not in the defined range, e.g. 19.5°C - 20.5°C this offset will be added to your target temperature. If range is 0, then offset is always added.
          default: 0
          selector:
            number:
              min: 0
              max: 5
              step: 0.5
              mode: slider
              unit_of_measurement: °C / °F

        input_aggressive_mode_calibration:
          name: 🌡️ Aggressive Calibration
          description: >
            `aggressive mode` `tweak` `experimental` 

            If you'd setup an temperature sensor and your thermostats allow calibration, you can enable this feature. If enabled the aggressive offset will be add to the calibration value and not the target temperature.
            
            *Note*: This feature is marked as experimental since not every calibration method could be tested. If you notice any problems simple open an issue or post a message in the [AHC-Thread](https://community.home-assistant.io/t/advanced-heating-control). 
          default: false
          selector:
            boolean:


    # F R O S T   P R O T E C T I O N
    frostprotection_section:
      name: Frost Protection
      icon: mdi:snowflake
      collapsed: true
      input:
        input_frost_protection_temp:
          name: ❄️ Frost Protection Temperature
          description: >
            `frost protection`


            You can set the frost protection temperature here.
          default: 5
          selector:
            number:
              min: 5.0
              max: 62.0
              step: 0.5
              mode: box
              unit_of_measurement: °C / °F

        input_frost_protection_duration:
          name: ❄️ Frost Protection Fallback Duration
          description: >
            `frost protection`


            If the defined [persons](https://www.home-assistant.io/integrations/person/) are not at home for a longer period of time or the presence sensor has no longer detected any presence, the frost protection temperature can be lowered after a this duration.
            Note: If set to zero frost protection temperature never will be set.
          default:
            days: 0
            hours: 0
            minutes: 0
            seconds: 0
          selector:
            duration:
              enable_day: true

    # LIMING PROTECTION
    liming_protection_section:
      name: Liming Protection
      icon: mdi:pipe-valve
      collapsed: true
      input:
        input_liming_protection:
          name: 🎚️ Liming Protection
          description: >
            `liming protection`
          

            Most smart thermostats come with that feature out of the box. 
            If your thermostat doesn't support this or you're using the generic thermostat integration this feature is maybe handy for you in order to prevent your valve against limescale. 
            The automation will set the thermostat to its max and open the valve for one minute.

          default: off
          selector:
            boolean:

        input_liming_protection_day:
          name: 🗓️ Day
          description: >
            `liming protection`
          

            Select the day of the week for the execution.
          default: "Mon"
          selector:
            select:
              options:
                - label: Monday
                  value: Mon
                - label: Tuesday
                  value: Tue
                - label: Wednesday
                  value: Wed
                - label: Thursday
                  value: Thu
                - label: Friday
                  value: Fri
                - label: Saturday
                  value: Sat
                - label: Sunday
                  value: Sun

        input_liming_protection_time:
          name: 🕖 Time
          description: >
            `liming protection`


            Select the time for the execution.
          default: "12:00:00"
          selector:
            time:

    # W I N T E R  M O D E
    toggle_section:
      name: "On/Off Automation Options"
      icon: mdi:light-switch
      collapsed: true
      input:
        input_mode_winter:
          name: ⛄ Winter Mode / Automation Toggle
          description: >
            `activation` `optional`


            If *on* the automation is active. If *off* your valves will set to *off* and the automation is going to sleep.
            You can set this up with:

              * [input boolean](https://www.home-assistant.io/integrations/input_boolean/)
              * [binary sensor](https://www.home-assistant.io/integrations/binary_sensor/)


            Create your helper [here](https://my.home-assistant.io/redirect/helpers/).
          default:
          selector:
            entity:
              filter:
                - domain:
                    - input_boolean
                    - binary_sensor
              multiple: false

        input_invert_winter_mode_value:
          name: 🔄 Invert Winter Mode Value
          description: >
            `activation`


            If enabled the the value of the binary winter mode entity will be inverted:

              * off -> activates the automation
              * on -> disables the automation
          default: off
          selector:
            boolean:

        input_mode_outside_temperature:
          name: 🌤️ Outside Temperature Sensor
          description: >
            `activation` `optional`


            You can control the switching on and off of your thermostats via the outside temperature. 
            To do this, select a temperature sensor or a weather entity and adjust the threshold below.

              * [weather entity](https://www.home-assistant.io/integrations/weather/)
              * [temperature sensor entity](https://www.home-assistant.io/integrations/sensor/)

          default:
          selector:
            entity:
              filter:
                - domain:
                    - weather
                - domain:
                    - sensor
                  device_class: temperature
              multiple: false

        input_mode_outside_temperature_threshold:
          name: 🎚️ Outside Temperature Threshold
          description: >
            `activation`


            If you'd select a temperature [sensor](https://www.home-assistant.io/integrations/sensor/) or a [weather entity](https://www.home-assistant.io/integrations/weather/) for controlling heating you can adjust the temperature threshold here.
            If the outside temperature falls below the threshold value, heating is activated.
          default: 15
          selector:
            number:
              min: 5
              max: 68
              step: 1
              mode: box
              unit_of_measurement: °C / °F

        input_mode_room_temperature:
          name: 🔘 Enable Room Temperature Threshold
          description: >
            `activation` `optional`


            If you enable this option the value of the defined room temperature sensor and the value of the outside temperautre must be below / above
            its threshold. That makes sense if you go with an A/C and the room is still heated up but it has already cooled down outside.


            **Not recommendend for heating**

          default: false
          selector:
            boolean:

        input_mode_room_temperature_threshold:
          name: 🎚️ Room Temperature Threshold
          description: >
            `activation`


            Threshold for your room temperature sensor.
          default: 18
          selector:
            number:
              min: 5
              max: 68
              step: 1
              mode: box
              unit_of_measurement: °C / °F

    # TWEAKS
    tweak_section:
      name: Custom Settings
      icon: mdi:cog-box
      collapsed: true
      input:
        input_action_call_delay:
          name: ⚙️ Action Call Delay
          description: >
            `tweak`


            Some [thermostats](https://www.home-assistant.io/integrations/climate/) have problems with setting mode and temperature. You can try to increase the
            delay between the action calls. This could fix your problems.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

        # C U S T O M   A C T I O N
        input_custom_action:
          name: 🎬 Custom Action
          description: >
            `optional`


            This custom action gets executed with every temperature / mode change except calibration. If you want to control other devices just check states before doing an action call.
            Use the variable *is_heating* in your conditions. *True* means heating is active.
          default:
          selector:
            action:

        input_custom_condition:
          name: ☑️ Temperature Change Custom Condition
          description: >
            `optional`


            Define a custom condition that prevents / allows temperature changes to your thermostats. This has no impact to the rest of logic like calibration.
          default:
          selector:
            condition:

        input_log_level:
          name: ✍️ Log Level
          description: ""
          default: debug
          selector:
            select:
              mode: dropdown
              options:
                - info
                - warning
                - error
                - debug

##################################################
############### T R I G G E R ####################
##################################################

trigger_variables:
  # uptime
  uptime_sensor: "{{ integration_entities('uptime') | first | default(none) }}"
  is_uptime_defined: "{{ uptime_sensor != none }}"

  # people
  input_persons: !input input_persons
  input_mode_guest: !input input_mode_guest
  input_people_entering_home_duration: !input input_people_entering_home_duration
  input_people_leaving_home_duration: !input input_people_leaving_home_duration

  input_person_count: "{{ input_persons | count }}"
  is_person_defined: "{{ input_person_count > 0 }}"
  is_guest_mode_defined: "{{ input_mode_guest != none }}"

  # M O D E S
  input_mode_winter: !input input_mode_winter
  input_mode_party: !input input_mode_party
  input_force_max_temperature: !input input_force_max_temperature
  input_hvac_mode: !input input_hvac_mode

  input_temperature_comfort: !input input_temperature_comfort
  input_temperature_minimum: !input input_temperature_minimum
  input_time_based_temperature_change_valve_target: !input input_time_based_temperature_change_valve_target

  # S C H E D U L E R
  input_schedulers: !input input_schedulers
  input_scheduler_selector: !input input_scheduler_selector
  input_scheduler_presence: !input input_scheduler_presence

  # A D D I T I O N A L   S E T T I N G S
  input_trvs: !input input_trvs
  input_windows: !input input_windows
  input_temperature_sensor: !input input_temperature_sensor
  input_presence_sensor: !input input_presence_sensor
  input_calibration_timeout: !input input_calibration_timeout

  input_proximity: !input input_proximity
  input_proximity_duration: !input input_proximity_duration
  input_proximity_distance: !input input_proximity_distance

  # MODE ON / OFF
  input_mode_outside_temperature: !input input_mode_outside_temperature
  input_mode_outside_temperature_threshold: !input input_mode_outside_temperature_threshold
  is_mode_room_temperature: !input input_mode_room_temperature
  input_mode_room_temperature_threshold: !input input_mode_room_temperature_threshold

  input_frost_protection_duration: !input input_frost_protection_duration

  is_heat_only_if_below_real_temp: !input input_off_if_above_room_temperature

  factor: "{{ iif(input_hvac_mode == 'cool', -1, 1) | int }}"

  input_invert_winter_mode_value: !input input_invert_winter_mode_value

  # L I M I N G  P R O T E C T I O N
  input_liming_protection: !input input_liming_protection
  input_liming_protection_day: !input input_liming_protection_day
  input_liming_protection_time: !input input_liming_protection_time

trigger:
  # LIMING PROTECTION
  - trigger: template
    value_template: >
      {% set state_winter_mode = true %}
      {% if input_mode_winter != none %}
        {% set state_winter_mode = is_state(input_mode_winter,'on') %}
      {% endif %}

      {% set is_liming_day = input_liming_protection_day == now().strftime('%a') %}
      {% set is_liming_time = input_liming_protection_time[:-3] in now() | string %}

      {{ input_liming_protection and not state_winter_mode and is_liming_day and is_liming_time }}
    id: temperature_change_liming_protection_on

  - trigger: template
    value_template: >
      {% set state_winter_mode = true %}
      {% if input_mode_winter != none %}
        {% set state_winter_mode = is_state(input_mode_winter,'on') %}
      {% endif %}

      {% set is_liming_day = input_liming_protection_day == now().strftime('%a') %}
      {% set is_liming_time = input_liming_protection_time[:-3] in now() | string %}

      {{ not (input_liming_protection and not state_winter_mode and is_liming_day and is_liming_time) }}
    id: temperature_change_liming_protection_off

  # system
  - trigger: homeassistant
    event: start
    id: temperature_change_hastart

  - trigger: event
    event_type: automation_reloaded
    id: temperature_change_reload

  # S T A T E   T R I G G E R S
  - trigger: state
    entity_id: !input input_trvs
    attribute: temperature
    for:
      seconds: 5
    id: temperature_change_valve_target

  # T E M P E R A T U R E   C H A N G E S
  - trigger: template
    value_template: >
      {% if input_temperature_minimum != none %}
        {{ now() - states.input_number[input_temperature_minimum.split('.')[1]].last_updated >= timedelta(seconds=2) }}
      {% else %}
        {{ false }}
      {% endif %}
    id: temperature_change_eco

  - trigger: template
    value_template: >
      {% if input_temperature_comfort != none %}
        {{ now() - states.input_number[input_temperature_comfort.split('.')[1]].last_updated >= timedelta(seconds=2) }}
      {% else %}
        {{ false }}
      {% endif %}
    id: temperature_change_comfort

  # persons
  - trigger: template
    value_template: >
      {{ input_persons  | expand 
                        | selectattr('state', 'eq', 'home') 
                        | map(attribute='entity_id') 
                        | list 
                        | count > 0 
                        
        or (is_guest_mode_defined and states(input_mode_guest) in ['on','active'] ) }}
    id: temperature_change_person_on
    for: !input input_people_entering_home_duration

  - trigger: template
    value_template: >
        {{ input_persons  | expand 
                          | selectattr('state', 'eq', 'home') 
                          | map(attribute='entity_id') 
                          | list 
                          | count == 0 
          
          and (is_guest_mode_defined and states(input_mode_guest) not in ['on','active'] ) }}
    id: temperature_change_person_off
    for: !input input_people_leaving_home_duration

  # scheduler
  - trigger: template
    id: temperature_change_scheduler_on
    value_template: >
      {% set selected_scheduler = none %}
      {% set schedules_count = input_schedulers | count %}

      {% if schedules_count == 0 %}
        {% set selected_scheduler = none %}
      {% elif schedules_count == 1 or input_scheduler_selector == none %}
        {% set selected_scheduler = input_schedulers | first %}
      {% elif schedules_count > 1 %}
        {% set selector_value = states(input_scheduler_selector) %}

        {% if is_number(selector_value) %}
          {% set selector_value = iif(selector_value | int > schedules_count, schedules_count, selector_value) %}
          {% set selector_value = iif(selector_value | int <= 0, 1, selector_value) %}
          {% set selected_scheduler = input_schedulers[selector_value | int - 1] %}
        {% elif selector_value in ['on','off'] %}
          {% set selected_scheduler = iif(selector_value == 'off', input_schedulers[0], input_schedulers[1]) %}
        {% else %}
          {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'eq', selector_value) | map(attribute='entity_id') | first | default(none) %}
          {% if (selected_scheduler == none) %}
            {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'search', '(?i)' + selector_value) | map(attribute='entity_id') | first | default(none) %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if selected_scheduler == none %}
        {{ false }}
      {% else %}
        {{ is_state(selected_scheduler, 'on') }}
      {% endif %}

  - trigger: template
    id: temperature_change_scheduler_off
    value_template: >
      {% set selected_scheduler = none %}
      {% set schedules_count = input_schedulers | count %}

      {% if schedules_count == 0 %}
        {% set selected_scheduler = none %}
      {% elif schedules_count == 1 or input_scheduler_selector == none %}
        {% set selected_scheduler = input_schedulers | first %}
      {% elif schedules_count > 1 %}
        {% set selector_value = states(input_scheduler_selector) %}

        {% if is_number(selector_value) %}
          {% set selector_value = iif(selector_value | int > schedules_count, schedules_count, selector_value) %}
          {% set selector_value = iif(selector_value | int <= 0, 1, selector_value) %}
          {% set selected_scheduler = input_schedulers[selector_value | int - 1] %}
        {% elif selector_value in ['on','off'] %}
          {% set selected_scheduler = iif(selector_value == 'off', input_schedulers[0], input_schedulers[1]) %}
        {% else %}
          {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'eq', selector_value) | map(attribute='entity_id') | first | default(none) %}
          {% if (selected_scheduler == none) %}
            {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'search', '(?i)' + selector_value) | map(attribute='entity_id') | first | default(none) %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if selected_scheduler == none %}
        {{ false }}
      {% else %}
        {{ is_state(selected_scheduler, 'off') }}
      {% endif %}

  # presence sensor
  - trigger: template
    id: temperature_change_presence_on
    value_template: "{{ input_presence_sensor != none and is_state(input_presence_sensor, 'on') }}"
    for: !input input_presence_reaction_on_time

  - trigger: template
    value_template: "{{ input_presence_sensor != none and is_state(input_presence_sensor, 'off') }}"
    id: temperature_change_presence_off
    for: !input input_presence_reaction_off_time

  # presence scheduler
  - trigger: template
    id: temperature_change_presence_scheduler_on
    value_template: "{{ input_scheduler_presence != none and is_state(input_scheduler_presence, 'on') }}"
    for: !input input_action_call_delay

  - trigger: template
    id: temperature_change_presence_scheduler_off
    value_template: "{{ input_scheduler_presence != none and is_state(input_scheduler_presence, 'off') }}"
    for: !input input_action_call_delay

  # proximity
  - trigger: template
    id: temperature_change_person_proximity_on
    value_template: >
      {% set proximity_entities = device_entities(input_proximity) %}
      
      {% set is_arrived = proximity_entities  | expand 
                                          | selectattr('attributes.device_class', 'eq', 'enum') 
                                          | map(attribute='entity_id') | select('is_state','arrived') 
                                          | list | count > 0 %}

      {% set entities_towards = proximity_entities  | expand 
                                              | selectattr('attributes.device_class', 'eq', 'enum') 
                                              | map(attribute='entity_id') | select('is_state','towards') 
                                              | map('regex_replace','_(?=[^_]*$)(.*)', '')
                                              | list %}

      {% set entities_distances = proximity_entities  | expand 
                                              | selectattr('attributes.device_class', 'eq', 'distance')
                                              | selectattr('state', '<', input_proximity_distance | string)
                                              | map(attribute='entity_id')
                                              | map('regex_replace','_(?=[^_]*$)(.*)', '')
                                              | list %}

      {% set entites_towards_and_in_distance = entities_towards | select('in', entities_distances) | list | count > 0 %}

      {{ entites_towards_and_in_distance or is_arrived }}
    for: !input input_proximity_duration

  - trigger: template
    id: temperature_change_person_proximity_off
    value_template: >
      {% set proximity_entities = device_entities(input_proximity) %}
      {% set is_arrived = proximity_entities  | expand 
                                          | selectattr('attributes.device_class', 'eq', 'enum') 
                                          | map(attribute='entity_id') | select('is_state','arrived') 
                                          | list | count > 0 %}

      {% set entities_towards = proximity_entities  | expand 
                                              | selectattr('attributes.device_class', 'eq', 'enum') 
                                              | map(attribute='entity_id') | select('is_state','towards') 
                                              | map('regex_replace','_(?=[^_]*$)(.*)', '')
                                              | list %}

      {% set entities_distances = proximity_entities  | expand 
                                              | selectattr('attributes.device_class', 'eq', 'distance')
                                              | selectattr('state', '<', input_proximity_distance | string)
                                              | map(attribute='entity_id')
                                              | map('regex_replace','_(?=[^_]*$)(.*)', '')
                                              | list %}

      {% set entites_towards_and_in_distance = entities_towards | select('in', entities_distances) | list | count > 0 %}

      {{ entites_towards_and_in_distance == false and is_arrived == false }}
    for: !input input_proximity_duration

  # W I N D O W  O P E N
  - trigger: template
    value_template: "{{ expand(input_windows) | selectattr('state', 'eq', 'on') | list | count > 0 }}"
    for: !input input_windows_reaction_time_open
    id: temperature_change_window_on

  - trigger: template
    value_template: "{{ expand(input_windows) | selectattr('state', 'eq', 'on') | list | count == 0 }}"
    for: !input input_windows_reaction_time_close
    id: temperature_change_window_off

  # M O D E   -   W I N T E R
  - trigger: template
    id: temperature_change_winter_mode_on
    value_template: >
      {% if input_mode_winter != none %}
        {% set activation_state = iif(input_invert_winter_mode_value, 'off', 'on') %}
        {{ states(input_mode_winter) == activation_state }}
      {% endif %}
    for: !input input_action_call_delay

  - trigger: template
    id: temperature_change_winter_mode_off
    value_template: >
      {% if input_mode_winter != none %}
        {% set activation_state = iif(input_invert_winter_mode_value, 'off', 'on') %}
        {{ states(input_mode_winter) != activation_state }}
      {% endif %}
    for: !input input_action_call_delay

  # O U T S I D E   T E M P E R A T U R E
  - trigger: template
    id: temperature_change_outside_on
    value_template: >
      {% set outside_state = iif(input_mode_outside_temperature != none,false,true) %}

      {% if input_mode_outside_temperature != none %}
        {% set state = states(input_mode_outside_temperature) %}
        {% set state = iif(is_number(state) == true, state, state_attr(input_mode_outside_temperature,'temperature'))%}

        {% if is_number(state) %}
          {% set outside_state = (state | float - input_mode_outside_temperature_threshold | float) * factor < 0 %}
        {% endif %}
      {% endif %}

      {% set room_state = iif(is_mode_room_temperature and input_temperature_sensor != none,false,true) %}

      {% if input_temperature_sensor != none and is_mode_room_temperature %}
        {% set state = states(input_temperature_sensor) %}

        {% if is_number(state) %}
          {% set room_state = (state | float - input_mode_room_temperature_threshold | float) * factor < 0 %}
        {% endif %}
      {% endif %}

      {{ (input_temperature_sensor != none and is_mode_room_temperature) and room_state and outside_state }}
    for: !input input_action_call_delay

  - trigger: template
    id: temperature_change_outside_off
    value_template: >
      {% set outside_state = iif(input_mode_outside_temperature != none,false,true) %}

      {% if input_mode_outside_temperature != none %}
        {% set state = states(input_mode_outside_temperature) %}
        {% set state = iif(is_number(state) == true, state, state_attr(input_mode_outside_temperature,'temperature'))%}

        {% if is_number(state) %}
          {% set outside_state = (state | float - input_mode_outside_temperature_threshold | float) * factor < 0 %}
        {% endif %}
      {% endif %}

      {% set room_state = iif(is_mode_room_temperature and input_temperature_sensor != none,false,true) %}

      {% if input_temperature_sensor != none and is_mode_room_temperature %}
        {% set state = states(input_temperature_sensor) %}

        {% if is_number(state) %}
          {% set room_state = (state | float - input_mode_room_temperature_threshold | float) * factor < 0 %}
        {% endif %}
      {% endif %}

      {{ (input_temperature_sensor != none and is_mode_room_temperature) and (not room_state or not outside_state) }}
    for: !input input_action_call_delay

  # M O D E   -   M A I N T A N A C E
  - trigger: template
    id: temperature_change_force_max_temperature_on
    value_template: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'on') }}"
    for:
      seconds: 2

  - trigger: template
    id: temperature_change_force_max_temperature_off
    value_template: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'off') }}"
    for: !input input_action_call_delay

  # M O D E   -   P A R T Y
  - trigger: template
    id: temperature_change_party_on
    value_template: "{{ input_mode_party | expand | selectattr('state', 'in', ['active','on']) | list | count > 0 }}"
    for: !input input_action_call_delay

  - trigger: template
    value_template: "{{ input_mode_party | expand | selectattr('state', 'in', ['active','on']) | list | count == 0 }}"
    id: temperature_change_party_off
    for: !input input_action_call_delay

  # E X T E R N A L  C A L I B R A T I O N   S E N S O R
  - trigger: template
    id: calibration_sensor_change
    value_template: >
      {% if input_temperature_sensor != none %}
        {{ (now() - states.sensor[input_temperature_sensor.split('.')[1]].last_updated) >= timedelta(hours=input_calibration_timeout.hours, minutes=input_calibration_timeout.minutes, seconds=input_calibration_timeout.seconds) }}
      {% else %}
        {{ false }}
      {% endif %}

  - trigger: state
    id: calibration_aggressive_mode_thermostat_change
    entity_id: !input input_trvs
    attribute: current_temperature
    for: !input input_calibration_timeout

  - trigger: template
    id: calibration_popp_change
    value_template: >
      {% if input_temperature_sensor != none %}
        {{ (now() - states.sensor[input_temperature_sensor.split('.')[1]].last_updated) >= timedelta(hours=0, minutes=0, seconds=2) }}
      {% else %}
        {{ false }}
      {% endif %}

  - trigger: template
    id: calibration_popp_ping
    value_template: >
      {% set has_valves_danfoss = input_trvs | select('is_device_attr', 'manufacturer', 'Danfoss') | list  %}
      {% set has_valves_popp = input_trvs | select('is_device_attr', 'manufacturer', 'Popp') | list %}
      {% set valves_hive = input_trvs | select('is_device_attr', 'manufacturer', 'Hive') | list %}

      {% set all_valves = has_valves_danfoss + has_valves_popp + valves_hive %}

      {% if all_valves | count == 0 or input_temperature_sensor == none %}
        {{ false }}
      {% else %}
        {{ now().strftime('%M') | int % 10 == 0 }}
      {% endif %}

  # C O M F O R T   T E M P   C H A N G E   B Y   T I M E
  - trigger: template
    id: temperature_change_heating_adjustment
    value_template: "{{ now().strftime('%H:%M') in (input_time_based_temperature_change_valve_target | map(attribute='time') | list) }}"

  # F R O S T   P R O T E C T I O N
  - trigger: template
    id: temperature_change_frost_protection_on
    value_template: >
      {% set is_frost_protection_configured = input_frost_protection_duration.hours | int > 0 or input_frost_protection_duration.minutes | int > 0 or input_frost_protection_duration.seconds | int > 0 %}
      {% set is_frost_protection_configured = iif(is_frost_protection_configured,is_frost_protection_configured,days in input_frost_protection_duration) %}
      {% set person_count = input_persons | count %}
      {% set is_person_based = person_count > 0 %}
      {% set is_presence_based = input_presence_sensor != none %}
      {% set person_home_count = input_persons | expand | selectattr('state','==','home') | map(attribute='entity_id') | list | count %}
      {% set anybody_is_home = person_count > 0 and person_home_count > 0 %}

      {% if (not is_frost_protection_configured) or (is_frost_protection_configured and (person_count == 0 or anybody_is_home or is_presence_based == false)) %}
        {{ false }}
      {% else %}
        {% set person_fp = false %}
        {% set presence_fp = false %}

        {% set delta = timedelta(**input_frost_protection_duration)%}

        {% if is_person_based %}
          {% set last_person_leaving = input_persons | expand | sort(attribute = 'last_changed', reverse=true) | map(attribute='entity_id') | first %}
          {% set person_fp = (now() - states.person[last_person_leaving.split('.')[1]].last_changed) >= delta %}
        {% endif %}

        {% if is_presence_based %}
          {% set presence_fp = (now() - ([input_presence_sensor] | expand | map(attribute='last_changed') | first)) >= delta %}
        {% endif %}

        {% if is_person_based and is_presence_based %}
          {{ person_fp and presence_fp }}
        {% else %}
          {{ iif(is_person_based, person_fp, presence_fp) }}
        {% endif %}
      {% endif %}

  # HEATING / COOLING WHEN ABOVE/BELOW ROOM TEMPERATURE
  - trigger: template
    id: temperature_change_room_temp_above_target
    value_template: >
      {% if input_temperature_sensor != none and is_heat_only_if_below_real_temp == true %}
        {{ (now() - states.sensor[input_temperature_sensor.split('.')[1]].last_updated) >= timedelta(hours=0, minutes=0, seconds=2) }}
      {% else %}
        {{ false }}
      {% endif %}

variables:
  #####################################################################################
  #################################### INPUTS #####################################
  #####################################################################################

  # thermostats / sensors
  input_trvs: !input input_trvs
  input_hvac_mode: !input input_hvac_mode
  input_temperature_sensor: !input input_temperature_sensor

  # temperatures
  input_temperature_comfort: !input input_temperature_comfort
  input_temperature_comfort_static: !input input_temperature_comfort_static
  input_temperature_minimum: !input input_temperature_minimum
  input_temperature_minimum_static: !input input_temperature_minimum_static

  #frost protection
  input_frost_protection_temp: !input input_frost_protection_temp
  input_frost_protection_duration: !input input_frost_protection_duration

  #liming protection
  input_liming_protection: !input input_liming_protection
  input_liming_protection_day: !input input_liming_protection_day
  input_liming_protection_time: !input input_liming_protection_time

  # heating scheduler
  input_schedulers: !input input_schedulers
  input_scheduler_selector: !input input_scheduler_selector

  # presence
  input_presence_sensor: !input input_presence_sensor
  input_scheduler_presence: !input input_scheduler_presence
  input_presence_reaction_off_time: !input input_presence_reaction_off_time
  input_presence_reaction_on_time: !input input_presence_reaction_on_time

  # window detection
  input_windows: !input input_windows
  input_windows_reaction_time_open: !input input_windows_reaction_time_open
  input_windows_reaction_time_close: !input input_windows_reaction_time_close
  input_window_open_temperature: !input input_window_open_temperature
  is_legacy_restore: !input input_window_legacy_restore

  # wintermode / on/off
  input_mode_winter: !input input_mode_winter
  input_invert_winter_mode_value: !input input_invert_winter_mode_value
  input_mode_outside_temperature: !input input_mode_outside_temperature
  input_mode_outside_temperature_threshold: !input input_mode_outside_temperature_threshold

  # proximity
  input_proximity: !input input_proximity

  # people
  input_persons: !input input_persons
  input_mode_guest: !input input_mode_guest
  input_people_entering_home_duration: !input input_people_entering_home_duration
  input_people_leaving_home_duration: !input input_people_leaving_home_duration

  # force comfort
  input_mode_party: !input input_mode_party
  input_force_max_temperature: !input input_force_max_temperature

  # calibration
  input_calibration_delta: !input input_calibration_delta
  is_generic_calibration: !input input_calibration_generic
  is_rounded_values: !input input_calibration_rounded_values
  
  # Aggressive Mode
  input_aggressive_mode_offset: !input input_aggressive_mode_offset
  input_aggressive_mode_range: !input input_aggressive_mode_range
  input_aggressive_mode_calibration: !input input_aggressive_mode_calibration
  
  # away mode
  input_away_offset: !input input_away_offset
  is_scheduler_away_mode: !input input_away_scheduler_mode
  is_presence_away_mode: !input input_away_presence_mode
  presence_ignor_people: !input input_away_presence_ignor_people

  # heating adjustments
  input_time_based_temperature_change_valve_target: !input input_time_based_temperature_change_valve_target

  # temperature tweaks
  is_reset_temperature: !input input_reset_temperature
  is_off_instead_min: !input input_off_instead_of_eco
  is_not_off_but_min: !input input_min_instead_of_off
  is_fahrenheit: !input input_fahrenheit
  is_heat_only_if_below_real_temp: !input input_off_if_above_room_temperature
  is_physical_change_enabled: !input input_physical_change

  # custom tweaks
  input_action_call_delay: !input input_action_call_delay
  input_custom_action: !input input_custom_action
  
  #####################################################################################
  #################################### EVALUATION #####################################
  #####################################################################################

  # uptime
  up_time_sensor: "{{ integration_entities('uptime') | first | default(none) }}"
  is_uptime_defined: "{{ up_time_sensor != none }}"
  uptime: >
    {% if is_uptime_defined %}
      {{ states(up_time_sensor) | as_datetime }}
    {% else %}
      {{ now() }}
    {% endif %}

  # persons
  is_person_defined: "{{ input_persons | count > 0 }}"
  is_guest_mode: "{{ input_mode_guest != none and is_state(input_mode_guest, 'on') }}"
  is_anybody_home: >
    {% if is_guest_mode %}
      {{ true }}
    {% elif not is_person_defined %}
      {{ false }}
    {% else %}
      {% set on_time_delta = now() - timedelta(**input_people_entering_home_duration) %}
      {% set off_time_delta = now() - timedelta(**input_people_leaving_home_duration) %}

      {% set uptime_on = as_datetime(uptime) + timedelta(**input_people_entering_home_duration) %}
      {% set uptime_off = as_datetime(uptime) + timedelta(**input_people_leaving_home_duration) %}

      {% set result = false %}

      {% if uptime_on > on_time_delta or uptime_off > off_time_delta %}
        {{ input_persons  | expand 
                          | selectattr('state', 'eq', 'home') 
                          | map(attribute='entity_id') 
                          | list 
                          | count > 0 }}
      {% else %}
        {% set somebody_is_home = input_persons | expand
                                            | selectattr('state', 'eq', 'home')
                                            | selectattr('last_changed', '<=', on_time_delta)
                                            | map(attribute='entity_id') 
                                            | list
                                            | count > 0 %}

        {% set somebody_is_leaving = input_persons | expand 
                                                | rejectattr('state', 'eq', 'home')
                                                | selectattr('last_changed', '>', off_time_delta)
                                                | map(attribute='entity_id')  
                                                | list
                                                | count > 0 %}

        {{ somebody_is_home or somebody_is_leaving }}
      {% endif %}
    {% endif %}

  # schedules
  active_scheduler: >
    {% set selected_scheduler = none %}
    {% set schedules_count = input_schedulers | count %}

    {% if schedules_count == 0 %}
      {% set selected_scheduler = none %}
    {% elif schedules_count == 1 or input_scheduler_selector == none %}
      {% set selected_scheduler = input_schedulers | first %}
    {% elif schedules_count > 1 %}
      {% set selector_value = states(input_scheduler_selector) %}

      {% if is_number(selector_value) %}
        {% set selector_value = iif(selector_value | int > schedules_count, schedules_count, selector_value) %}
        {% set selector_value = iif(selector_value | int <= 0, 1, selector_value) %}
        {% set selected_scheduler = input_schedulers[selector_value | int - 1] %}
      {% elif selector_value in ['on','off'] %}
        {% set selected_scheduler = iif(selector_value == 'off', input_schedulers[0], input_schedulers[1]) %}
      {% else %}
        {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'eq', selector_value) | map(attribute='entity_id') | first | default(none) %}
        {% if (selected_scheduler == none) %}
          {% set selected_scheduler = input_schedulers | expand | selectattr('attributes.friendly_name', 'search', '(?i)' + selector_value) | map(attribute='entity_id') | first | default(none) %}
        {% endif %}
      {% endif %}
    {% endif %}

    {{ selected_scheduler }}

  state_scheduler: "{{ active_scheduler != none and is_state(active_scheduler,'on') }}"

  # presence
  is_presence_sensor_defined: "{{ input_presence_sensor != none }}"
  is_presence_scheduler_defined: "{{ input_scheduler_presence != none }}"
  state_presence_scheduler: "{{ is_presence_scheduler_defined and is_state(input_scheduler_presence, 'on') }}"

  state_presence_sensor: >
    {% if not is_presence_sensor_defined %}
      {{ false }}
    {% else %}
      {% set last_changed = [input_presence_sensor] | expand | map(attribute='last_changed') | first %}
      {% set sensor_state = is_state(input_presence_sensor, 'on') %}
      {% set reaction_time = iif(sensor_state, input_presence_reaction_on_time, input_presence_reaction_off_time) %}
      {% set min_timestamp = last_changed + timedelta(**reaction_time) %}

      {% if is_uptime_defined and as_datetime(uptime) + timedelta(**reaction_time) > now() - timedelta(**reaction_time) %}
        {{ sensor_state }}
      {% else %}
        {% set is_limit = min_timestamp <= now() %}

        {{ (sensor_state == true and is_limit) or (sensor_state == false and not is_limit) }}
      {% endif %}
    {% endif %}

  state_presence: >
    {{ iif(is_presence_sensor_defined, state_presence_scheduler and state_presence_sensor, state_presence_sensor) }}

  # proximity
  is_proximity_defined: "{{ input_proximity != none }}"

  state_proximity_arrived: >
    {% set proximity_entities = device_entities(input_proximity) %}
    {% set is_arrived = proximity_entities  | expand 
        | selectattr('attributes.device_class', 'eq', 'enum') 
        | map(attribute='entity_id') | select('is_state','arrived') 
        | list | count > 0 %}
    {{ is_arrived }}

  state_proximity_way_home: >
    {% set proximity_entities = device_entities(input_proximity) %}

    {% set earliest_timestamp = now() - timedelta(**input_proximity_duration) %}
    {% set uptime_duration = as_datetime(uptime) + timedelta(**input_proximity_duration) %}

    {% if uptime_duration > earliest_timestamp %}
      {% set earliest_timestamp = uptime_duration%}
    {% endif %}

    {% set entities_towards = proximity_entities  | expand 
        | selectattr('attributes.device_class', 'eq', 'enum') 
        | selectattr('last_changed', '<=', earliest_timestamp)
        | map(attribute='entity_id') | select('is_state','towards')
        | map('regex_replace','_(?=[^_]*$)(.*)', '')
        | list %}

    {% set entities_distances = proximity_entities  | expand 
        | selectattr('attributes.device_class', 'eq', 'distance')
        | selectattr('state', '<', input_proximity_distance | string)
        | map(attribute='entity_id')
        | map('regex_replace','_(?=[^_]*$)(.*)', '')
        | list %}

    {% set towards_and_in_distance = entities_towards | select('in', entities_distances) | list | count > 0 %}

    {{ towards_and_in_distance }}

  # force max temperature
  is_force_max_temperature: "{{ input_force_max_temperature != none and is_state(input_force_max_temperature, 'on') }}"

  # party
  active_party_entity: "{{ input_mode_party | expand | selectattr('state', 'in', ['active','on']) | map(attribute='entity_id') | first | default(none) }}"
  state_mode_party: "{{ active_party_entity != none }}"
  party_temp: >
    {% set pos_party_temp = none %}
    {% if state_mode_party == true %}
      {% set name = state_attr(active_party_entity,'friendly_name') %}
      {% set pos_temp = name.split(' ') | last %}
      {% if is_number(pos_temp) %}
        {% set pos_party_temp = pos_temp | float %}
      {% endif %}
    {% endif %}
    {{ pos_party_temp }}

  # away
  is_away: >
    {% if is_person_defined and not is_anybody_home %}
      {{ (is_scheduler_away_mode and state_scheduler) or (is_presence_away_mode and state_presence_scheduler and not state_presence) }}
    {% elif presence_ignor_people and is_presence_away_mode %}
      {{ state_presence_scheduler and not state_presence }}
    {% else %}
      {{ false }}
    {% endif %}

  # windows & doors
  state_window: >
    {% set on_time_delta = now() - timedelta(**input_windows_reaction_time_open) %}
    {% set off_time_delta = now() - timedelta(**input_windows_reaction_time_close) %}

    {% set has_open_windows = input_windows 
        | expand
        | selectattr('state', 'eq', 'on')
        | selectattr('last_changed', '<=', on_time_delta)
        | map(attribute='entity_id') 
        | list
        | count > 0 %}

    {% set closed_but_not_in_duration = input_windows 
        | expand
        | selectattr('state', 'eq', 'off')
        | selectattr('last_changed', '>=', off_time_delta)
        | map(attribute='entity_id') 
        | list
        | count > 0 %}

    {{ has_open_windows or closed_but_not_in_duration }}

  # aggressive mode
  is_aggressive_mode: "{{ input_aggressive_mode_offset > 0 }}"

  # thermostat groups
  valves: "{{ expand(input_trvs) | selectattr('attributes.hvac_modes','search','(?i)'+input_hvac_mode) | map(attribute='entity_id') | list }}"
  valves_unsupported: "{{ input_trvs | reject('in',valves) | list }}"
  valves_off_mode: "{{ valves | expand | selectattr('attributes.hvac_modes','search','(?i)off') | map(attribute='entity_id') | list }}"
  valves_without_off_mode: "{{ valves | reject('in',valves_off_mode) | list }}"

  # global
  factor: "{{ iif(input_hvac_mode == 'cool', -1, 1) | int }}"
  no_changes: "{{ input_persons | count == 0 and input_mode_guest == none and input_schedulers | count == 0 and input_presence_sensor == none and input_proximity == none }}"
  winter_mode: "{{ true }}"
  set_comfort: "{{ false }}"

conditions: []

actions:
  - event: ahc_event
    event_data:
      state: "{{ winter_mode }}"
      mode: "{{ iif(set_comfort == true, 'comfort', 'eco') }}"
      automation: "{{ this.entity_id }}"
      is_anybody_home: "{{ is_anybody_home }}"
      is_guest_mode: "{{ is_guest_mode }}"
      active_scheduler: "{{ active_scheduler }}"
      state_scheduler: "{{ state_scheduler }}"
      state_presence_sensor: "{{ state_presence_sensor }}"
      state_presence_scheduler: "{{ state_presence_scheduler }}"
      state_presence: "{{ state_presence }}"
      state_proximity_arrived: "{{ state_proximity_arrived }}"
      state_proximity_way_home: "{{ state_proximity_way_home }}"
      is_force_max_temperature: "{{ is_force_max_temperature }}"
      active_party_entity: "{{ active_party_entity }}"
      party_temp: "{{ party_temp }}"
      is_away: "{{ is_away }}"
      state_window: "{{ state_window }}"
      is_aggressive_mode: "{{ is_aggressive_mode }}"

mode: queued